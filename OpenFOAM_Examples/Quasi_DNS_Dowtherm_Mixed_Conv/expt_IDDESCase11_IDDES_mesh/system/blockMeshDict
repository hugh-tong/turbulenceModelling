/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


// cm scale, or 0.01 m, not meter scale!
scale   0.01;

vertices
(

// bottom z vertices 
    (-2.25 -0.75 0)
    (2.25 -0.75 0)
    (-2.25 0 0)
    (2.25 0 0)

    (-2.25 0.75 0)
    (2.25 0.75 0)

// top z vertices

    (-2.25 -0.75 12)
    (2.25 -0.75 12)

    (-2.25 0 12)
    (2.25 0 12)
    (-2.25 0.75 12)
    (2.25 0.75 12)
);

blocks
(
    hex (0 1 3 2 6 7 9 8) (14 5 38) simpleGrading (1 4 1)
    hex (2 3 5 4 8 9 11 10) (14 5 38) simpleGrading (1 0.25 1)
    // how simple grading works: in positive y direction
    // as y increases, cell gets bigger according to expansion ratio
    // such that largest cell at Ymax is 4x smallest cell at Ymin

);

edges
(
);

boundary
(
    leftWall
    {
        type            wall;
        faces           ((0 1 7 6)); // y=-0.75 plane
    }
    rightWall
    {
        type            wall;
        faces           ((4 10 11 5)); // y=0.75 plane
    }

    leftSides_periodic0
    {
        type            cyclic;
        neighbourPatch  leftSides_periodic1;
        faces           ((1 3 9 7)); // x=2.25 plane
    }
    leftSides_periodic1
    {
        type            cyclic;
        neighbourPatch  leftSides_periodic0;
        faces           ((0 6 8 2)); // x=-2.25 plane

    }
    rightSides_periodic0
    {
        type            cyclic;
        neighbourPatch  rightSides_periodic1;
        faces           ((3 5 11 9)); // x=2.25 plane
    }
    rightSides_periodic1
    {
        type            cyclic;
        neighbourPatch  rightSides_periodic0;
        faces           ((2 8 10 4)); // x=-2.25 plane
    }

    leftInOut_periodic0
    {
        type            cyclic;
        neighbourPatch  leftInOut_periodic1;
        faces           ((0 2 3 1)); // z=0 plane
    }
    leftInOut_periodic1
    {
        type            cyclic;
        neighbourPatch  leftInOut_periodic0;
        faces           ((6 7 9 8)); // z=12 plane

    }
    rightInOut_periodic0
    {
        type            cyclic;
        neighbourPatch  rightInOut_periodic1;
        faces           ((2 4 5 3)); // z=0 plane
    }
    rightInOut_periodic1
    {
        type            cyclic;
        neighbourPatch  rightInOut_periodic0;
        faces           ((8 9 11 10)); // z=12 plane
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
