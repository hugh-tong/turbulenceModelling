/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     buoyantPimpleFoam;

startFrom       latestTime;

startTime       100;

stopAt          endTime;

endTime         200;

deltaT          2e-4;

writeControl    adjustableRunTime;

writeInterval   0.4;

purgeWrite      10;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

maxCo		0.5;

adjustTimeStep	yes;


functions
{
    fieldAverage1
    {
        type            fieldAverage;
        libs            ("libfieldFunctionObjects.so");
        writeControl    writeTime;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            p
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }
        );
    }


   localHeatTrfCoeff_Left
        {
        type            heatTransferCoeff;
        libs            ("libfieldFunctionObjects.so");
        executeControl  writeTime;
        writeControl    writeTime;
        // region          oil;
        patches         ("leftWall");
        field           T;

        htcModel        fixedReferenceTemperature;
        TRef            343;
        }

   localHeatTrfCoeff_Right
        {
        type            heatTransferCoeff;
        libs            ("libfieldFunctionObjects.so");
        executeControl  writeTime;
        writeControl    writeTime;
        // region          oil;
        patches         ("rightWall"); 
        field           T;

        htcModel        fixedReferenceTemperature;
        TRef            343;
        }

    
    localWallShearStress
	{
	type		wallShearStress;
	libs            ("libfieldFunctionObjects.so");
        executeControl  writeTime;
        writeControl    writeTime;
	patches		("leftWall" "rightWall");


	}




   avg_ValuesRight
        {
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");

        executeControl  writeTime;
        writeControl    writeTime;
        writeFields     yes;
        fields
        (
        heatTransferCoeff(T)
	wallShearStress
        T
        );

        regionType      patch;
        name            rightWall;
        operation       areaAverage;
        // region          oil;
        surfaceFormat   none;

        }



   avg_ValuesLeft                                                                           {
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");

        executeControl  writeTime;
        writeControl    writeTime;
        writeFields     yes;
        fields
        (
        heatTransferCoeff(T)
        wallShearStress
        T
        );

        regionType      patch;
        name            leftWall;
        operation       areaAverage;
        // region          oil;
        surfaceFormat   none;

        }


   temp_and_velocity
	{
	type sets;
	libs            ("libsampling.so");

	interpolationScheme cellPointFace;

	setFormat raw;
	executeControl  writeTime;
        writeControl    writeTime;
	sets
	(

	faceLineIntersection // samples data across a line at cell faces
    	{
        type            face;
        axis            y; // i use y for easy plotting, but u can use xyz to indicate you want all 3 coordinates
        start           (0 -0.0075 0.06);
        end             (0 0.0075 0.06);
    	}

        uniformPoints // samples data uniformly across a line based on no. of points
        {
        type            uniform;
        axis            distance;
        start           (0 -0.0075 0.06);
        end             (0 0.0075 0.06);         
	nPoints		300;
        }

	);


	fields
	(
	T
	U
	);
	}	



   boundaryData_test
	{
	type surfaces;
	libs            ("libsampling.so");

	interpolationScheme cellPointFace;

	surfaceFormat 	raw;
	executeControl  writeTime;
        writeControl    writeTime;
	
	surfaces
	(

	boundaryInlet // samples data across a line at cell faces
    	{
        type            patch;
        patches         ("rightInOut_periodic1" "leftInOut_periodic1")   ;
    	interpolate	true;
	surfaceFormat	boundaryData;
	}

        boundaryOutlet // samples data uniformly across a line based on no. of points
        {
        type            patch;
        patches         ("rightInOut_periodic0" "leftInOut_periodic0")   ;
        interpolate     true;
        surfaceFormat   boundaryData;

        }

	);


	fields
	(
	T
	U
	);
	}	


}

// ************************************************************************* //
